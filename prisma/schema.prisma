// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model User {
  userId          String           @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  name            String
  auths           Auth[]
  genshinAccounts GenshinAccount[]
}

model Auth {
  id         String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  providerId String
  provider   String
  user       User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId     String @db.Uuid
}

model GenshinAccount {
  uid          String        @id @unique
  name         String        @default("Traveler")
  ar           Int           @default(1)
  server       String        @default("Europe")
  wl           Int           @default(1)
  signature    String?
  namecard     String        @default("Traveler")
  config       Config?
  wishes       Wish[]
  achievements Achievement[]
  characters   Character[]
  user         User          @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId       String        @db.Uuid
  Weapon       Weapon[]
}

model Wish {
  genshinWishId  String?
  order          Int
  createdAt      DateTime       @default(now())
  uid            String
  gachaType      String         @map("gacha_type")
  time           DateTime       @map("wish_time")
  name           String
  itemType       String         @map("item_type")
  rankType       String         @map("rank_type")
  pity           String
  bannerId       String
  isFeatured     Boolean        @default(false)
  wonFiftyFifty  Boolean        @default(false)
  genshinAccount GenshinAccount @relation(fields: [uid], references: [uid], onDelete: Cascade)
  wasImported    Boolean        @default(false)

  @@id([order, uid, gachaType], name: "id")
}

model Achievement {
  key            Int
  achieved       Boolean
  genshinAccount GenshinAccount @relation(fields: [uid], references: [uid], onDelete: Cascade)
  uid            String

  @@id([key, uid], name: "id")
}

model Character {
  key                  String
  level                Int            @default(1)
  constellation        Int            @default(0)
  ascension            Int            @default(0)
  talentAuto           Int            @default(1)
  talentSkill          Int            @default(1)
  talentBurst          Int            @default(1)
  manualConstellations Int?
  genshinAccount       GenshinAccount @relation(fields: [uid], references: [uid], onDelete: Cascade)
  uid                  String

  @@id([key, uid], name: "id")
}

model Weapon {
  id             String         @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key            String
  level          Int            @default(1)
  ascension      Int            @default(0)
  refinement     Int            @default(1)
  characterKey   String?
  genshinAccount GenshinAccount @relation(fields: [uid], references: [uid], onDelete: Cascade)
  uid            String
}

model Config {
  uid              String         @id @unique
  autoRefine3      Boolean        @default(false)
  autoRefine4      Boolean        @default(false)
  autoRefine5      Boolean        @default(false)
  preferedLanguage String         @default("en")
  genshinAccount   GenshinAccount @relation(fields: [uid], references: [uid], onDelete: Cascade)
}
